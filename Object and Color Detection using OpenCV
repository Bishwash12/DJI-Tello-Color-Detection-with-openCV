# Import all the necessary libraries including Tello for DJI Tellopy
from djitellopy import Tello
import cv2
import numpy as np
from time import sleep
import time


######################################################################################################################
width = 640
height = 480
deadZone = 100
######################################################################################################################

startCounter = 0

# Connect to Tello
# Creating an object me
me = Tello()
me.connect()
me.for_back_velocity = 0
me.left_right_velocity = 0
me.up_down_velocity = 0
me.yaw_velocity = 0
me.speed = 0

# getting the battery percentage remaining
print(me.get_battery())

me.streamoff()
me.streamon()


frameWidth = width
frameHeight = height


# defining variables
global imgContour
global dir
global areaMax
global area

def empty(a):
    pass

cv2.namedWindow("Parameters")
cv2.resizeWindow("Parameters",640,480)
cv2.createTrackbar("Threshold1", "Parameters", 166, 255, empty)
cv2.createTrackbar("Threshold2", "Parameters", 171, 255, empty)
cv2.createTrackbar("Area Min", "Parameters", 600, 30000, empty)
cv2.createTrackbar("Area Max", "Parameters", 80000, 100000, empty)

def stackImages(scale,imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range(0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[x][y].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0,0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape_[1], imgArray[0][0].shape_[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor(imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape [:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape_[1], imgArray[0].shape_[0]), None, scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor = np.hstack(imgArray)
        ver = hor
    return ver

def getContours(img,imgContour):
    global dir
    global area
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    if contours == []:
        dir = 5
# drawing contour based on the area
    for cnt in contours:
        area = cv2.contourArea(cnt)
        areaMin = cv2.getTrackbarPos("Area Min", "Parameters")
        if area > areaMin:
            cv2.drawContours(imgContour, cnt, -1, (255, 0, 255), 7)
            peri = cv2.arcLength(cnt, True)
            approx = cv2.approxPolyDP(cnt, 0.02 * peri, True)
            #print(len(approx))
            x, y, w, h = cv2.boundingRect(approx)
            cx = int(x + (w / 2))
            cy = int(y + (h / 2))

            if (cx < int(frameWidth/2)-deadZone):
                cv2.putText(imgContour, " GO LEFT ", (20, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 3)
                cv2.rectangle(imgContour, (0, int(frameHeight/2-deadZone)), (int(frameWidth/2)-deadZone, int(frameHeight/2)+deadZone), (0, 0, 255), cv2.FILLED)
                dir = 1
            elif (cx > int(frameWidth/2)+deadZone):
                cv2.putText(imgContour, " GO RIGHT ", (20, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 3)
                cv2.rectangle(imgContour, (int(frameWidth/2+deadZone),int(frameHeight/2-deadZone)), (frameWidth, int(frameHeight/2)+deadZone), (0, 0, 255), cv2.FILLED)
                dir = 2
            elif (cy < int(frameHeight/2)-deadZone):
                cv2.putText(imgContour, " GO UP ", (20, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 3)
                cv2.rectangle(imgContour, (int(frameWidth/2-deadZone), 0), (int(frameWidth/2+deadZone), int(frameHeight/2)-deadZone), (0, 0, 255), cv2.FILLED)
                dir = 3
            elif (cy > int(frameHeight/2)+deadZone):
                cv2.putText(imgContour, " GO DOWN ", (20, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 3)
                cv2.rectangle(imgContour, (int(frameWidth/2-deadZone),int(frameHeight/2)+deadZone), (int(frameWidth/2+deadZone),frameHeight), (0, 0, 255), cv2.FILLED)
                dir = 4
            else: dir = 0

            cv2.line(imgContour, (int(frameWidth/2),int(frameHeight/2)), (cx,cy), (0, 0, 255), 3)
            cv2.rectangle(imgContour, (x, y), (x + w, y + h), (0, 255, 0), 5)
            cv2.putText(imgContour, "Points: " + str(len(approx)), (x + w + 20, y + 20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(imgContour, "Area: " + str(int(area)), (x + w + 20, y + 45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(imgContour, " " + str(int(x)) + " " + str(int(y)), (x - 20, y - 45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0, 255, 0), 2)
        else: dir = 0


def display(img):
    cv2.line(img, (int(frameWidth/2)-deadZone,0),(int(frameWidth/2)-deadZone,frameHeight), (255, 255, 0), 3)
    cv2.line(img, (int(frameWidth/2)+deadZone,0),(int(frameWidth/2)+deadZone,frameHeight), (255, 255, 0), 3)
    cv2.circle(img, (int(frameWidth/2), int(frameHeight/2)), 5, (0, 0, 255), 5)
    cv2.line(img, (0,int(frameHeight / 2) - deadZone), (frameWidth, int(frameHeight / 2) - deadZone), (255, 255, 0), 3)
    cv2.line(img, (0,int(frameHeight / 2) + deadZone), (frameWidth, int(frameHeight / 2) + deadZone), (255, 255, 0), 3)

################# FLIGHT
if startCounter == 0:
    me.takeoff()
    sleep(2)
    me.send_rc_control(0,0,30,0)
    sleep(5)
    me.send_rc_control(0,0,0,0)
    sleep(2)
    startCounter = 1
    
# For Yellow
while True:

    # Get the image from Tello
    frame_read = me.get_frame_read()
    myFrame = frame_read.frame
    
    # Resizing the image 
    img = cv2.resize(myFrame, (width, height))
    yellow_imgContour = img.copy()
    
    # Converting BGR to HSV
    yellow_imgHsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    yellow_lower = np.array([20, 148, 89])
    yellow_upper = np.array([40, 255, 255])
    yellow_mask = cv2.inRange(yellow_imgHsv, yellow_lower, yellow_upper)
    yellow_result = cv2.bitwise_and(img, img, mask=yellow_mask)
    yellow_mask = cv2.cvtColor(yellow_mask, cv2.COLOR_GRAY2BGR)

    yellow_imgBlur = cv2.GaussianBlur(yellow_result, (7, 7), 1)
    yellow_imgGray = cv2.cvtColor(yellow_imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    yellow_imgCanny = cv2.Canny(yellow_imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    yellow_imgDil = cv2.dilate(yellow_imgCanny, kernel, iterations=1)
    getContours(yellow_imgDil, yellow_imgContour)
    display(yellow_imgContour)


# Movement of drone based on the value of dir

    if dir == 1:
        me.yaw_velocity = -20
    elif dir == 2:
        me.yaw_velocity = 20
    elif dir == 3:
        me.up_down_velocity = 12
    elif dir == 4:
        me.up_down_velocity = -12
    elif dir == 0:
        areaMax = cv2.getTrackbarPos("Area Max", "Parameters")
        me.left_right_velocity = 0
        me.for_back_velocity = 0
        me.up_down_velocity = 0
        me.yaw_velocity = 0
        if area <= areaMax:
            me.for_back_velocity = 25
        else:
            me.for_back_velocity = 0

    elif dir == 5:
        sleep(3)
        break
    # SEND VELOCITY VALUES  TO TELLO
    if me.send_rc_control:
        me.send_rc_control(me.left_right_velocity, me.for_back_velocity, me.up_down_velocity, me.yaw_velocity)
    print('yellow',dir)

me.send_rc_control(0, 0, 0, 75)
sleep(3)
me.send_rc_control(0,-30,0,0)
sleep(1)
me.send_rc_control(0, 0, 0, 0)
sleep(2)

# For Green
while True:

    # Get the image from Tello
    frame_read = me.get_frame_read()
    myFrame = frame_read.frame
    img = cv2.resize(myFrame, (width, height))
    green_imgContour = img.copy()
    green_imgHsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    green_lower = np.array([30, 90, 60])
    green_upper = np.array([90, 255, 255])
    green_mask = cv2.inRange(green_imgHsv, green_lower, green_upper)
    green_result = cv2.bitwise_and(img, img, mask=green_mask)
    green_mask = cv2.cvtColor(green_mask, cv2.COLOR_GRAY2BGR)

    green_imgBlur = cv2.GaussianBlur(green_result, (7, 7), 1)
    green_imgGray = cv2.cvtColor(green_imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    green_imgCanny = cv2.Canny(green_imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    green_imgDil = cv2.dilate(green_imgCanny, kernel, iterations=1)
    getContours(green_imgDil, green_imgContour)
    display(green_imgContour)


    if dir == 1:
        me.yaw_velocity = -20
    elif dir == 2:
        me.yaw_velocity = 20
    elif dir == 3:
        me.up_down_velocity = 12
    elif dir == 4:
        me.up_down_velocity = -12
    elif dir == 0:
        areaMax = cv2.getTrackbarPos("Area Max", "Parameters")
        me.left_right_velocity = 0
        me.for_back_velocity = 0
        me.up_down_velocity = 0
        me.yaw_velocity = 0
        if area <= areaMax:
            me.for_back_velocity = 25
        else:
            me.for_back_velocity = 0

    elif dir == 5:
        sleep(3)
        break
    # SEND VELOCITY VALUES  TO TELLO
    if me.send_rc_control:
        me.send_rc_control(me.left_right_velocity, me.for_back_velocity, me.up_down_velocity, me.yaw_velocity)
    print('green',dir)

me.send_rc_control(0, 0, 0, 75)
sleep(3)
me.send_rc_control(0,-30,0,0)
sleep(1)
me.send_rc_control(0, 0, 0, 0)
sleep(3)

# For Red
while True:

    # Get the image from Tello
    frame_read = me.get_frame_read()
    myFrame = frame_read.frame
    img = cv2.resize(myFrame, (width, height))
    red_imgContour = img.copy()
    red_imgHsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    red_lower = np.array([0, 120, 100])
    red_upper = np.array([10, 255, 255])
    red_mask = cv2.inRange(red_imgHsv, red_lower, red_upper)
    red_result = cv2.bitwise_and(img, img, mask=red_mask)
    red_mask = cv2.cvtColor(red_mask, cv2.COLOR_GRAY2BGR)

    red_imgBlur = cv2.GaussianBlur(red_result, (7, 7), 1)
    red_imgGray = cv2.cvtColor(red_imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    red_imgCanny = cv2.Canny(red_imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    red_imgDil = cv2.dilate(red_imgCanny, kernel, iterations=1)
    getContours(red_imgDil, red_imgContour)
    display(red_imgContour)

    if dir == 1:
        me.yaw_velocity = -20
    elif dir == 2:
        me.yaw_velocity = 20
    elif dir == 3:
        me.up_down_velocity = 12
    elif dir == 4:
        me.up_down_velocity = -12
    elif dir == 0:
        areaMax = cv2.getTrackbarPos("Area Max", "Parameters")
        me.left_right_velocity = 0
        me.for_back_velocity = 0
        me.up_down_velocity = 0
        me.yaw_velocity = 0
        if area <= areaMax:
            me.for_back_velocity = 25
        else:
            me.for_back_velocity = 0

    elif dir == 5:
        me.send_rc_control(0,-15,0,0)
        sleep(3)
        me.land()

    # SEND VELOCITY VALUES  TO TELLO
    if me.send_rc_control:
        me.send_rc_control(me.left_right_velocity, me.for_back_velocity, me.up_down_velocity, me.yaw_velocity)
    print('red',dir)

me.send_rc_control(0, 0, 0, 75)
sleep(3)
me.send_rc_control(0, -30, 0, 0)
sleep(1)
me.send_rc_control(0, 0, 0, 0)
sleep(3)

# For Blue
while True:

    # Get the image from Tello
    frame_read = me.get_frame_read()
    myFrame = frame_read.frame
    img = cv2.resize(myFrame, (width, height))
    blue_imgContour = img.copy()
    blue_imgHsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    
    # Defining the lower and upper range for sharp blue color
    blue_lower = np.array([80, 130, 100])
    blue_upper = np.array([120, 255, 255])
    blue_mask = cv2.inRange(blue_imgHsv, blue_lower, blue_upper)
    
    # Calculate the per-element bit-wise conjunction of two arrays or an array or a scalar
    blue_result = cv2.bitwise_and(img, img, mask=blue_mask)
    blue_mask = cv2.cvtColor(blue_mask, cv2.COLOR_GRAY2BGR)

    blue_imgBlur = cv2.GaussianBlur(blue_result, (7, 7), 1)
    blue_imgGray = cv2.cvtColor(blue_imgBlur, cv2.COLOR_BGR2GRAY)
    threshold1 = cv2.getTrackbarPos("Threshold1", "Parameters")
    threshold2 = cv2.getTrackbarPos("Threshold2", "Parameters")
    blue_imgCanny = cv2.Canny(blue_imgGray, threshold1, threshold2)
    kernel = np.ones((5, 5))
    blue_imgDil = cv2.dilate(blue_imgCanny, kernel, iterations=1)
    getContours(blue_imgDil, blue_imgContour)
    display(blue_imgContour)



    if dir == 1:
        me.yaw_velocity = -20
    elif dir == 2:
        me.yaw_velocity = 20
    elif dir == 3:
        me.up_down_velocity = 12
    elif dir == 4:
        me.up_down_velocity = -12
    elif dir == 0:
        areaMax = cv2.getTrackbarPos("Area Max", "Parameters")
        me.left_right_velocity = 0
        me.for_back_velocity = 0
        me.up_down_velocity = 0
        me.yaw_velocity = 0
        if area <= areaMax:
            me.for_back_velocity = 25
        else:
            me.for_back_velocity = 0

    elif dir == 5:
        sleep(3)
        break

    # SEND VELOCITY VALUES  TO TELLO
    if me.send_rc_control:
        me.send_rc_control(me.left_right_velocity, me.for_back_velocity, me.up_down_velocity, me.yaw_velocity)
    print('blue',dir)


    if cv2.waitKey(1) & 0xFF == ord('q'):
        me.land()
        break

cv2.destroyAllWindows()
